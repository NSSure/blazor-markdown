@page "/diagram/{diagramId}"

@inject HttpClient Client
@inject IJSRuntime JSRuntime

@using Blazor.Markdown.Shared.Model
@using Blazor.Markdown.Shared.Model.Options
@using Blazor.Markdown.Shared.Model.Returns

<style>
    .top-row a {
        border-right: 1px solid silver;
        height: 100%;
        width: 50px;
    }

    .diagram-properties {
        background-color: #ffffff;
    }

    .diagram-toolbar {
        width: 250px;
        background-color: #E6E6E6;
    }

        .diagram-toolbar ul {
            list-style-type: none;
            padding: 0;
        }

            .diagram-toolbar ul li {
                margin-bottom: 10px;
            }

    .diagram-ribbon {
        background-color: #E6E6E6;
    }

        .diagram-ribbon ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            display: flex;
            flex-direction: row;
            height: 50px;
        }

            .diagram-ribbon ul li button {
                padding: 0;
                width: 50px;
                height: 50px;
                border-radius: 0;
            }

                .diagram-ribbon ul li button.active {
                    background-color: #cccccc;
                }
</style>

<div class="app-page-diagram flex-fill d-flex flex-column">
    <div class="diagram-ribbon">
        <ul>
            <li>
                <button type="button" class="btn"><i class="fas fa-mouse-pointer"></i></button>
            </li>
            <li>
                <button type="button" class="btn" @onclick="this.AddComponent"><i class="fas fa-square"></i></button>
            </li>
            <li>
                <button type="button" class="btn"><i class="fas fa-trash"></i></button>
            </li>
            <li class="mt-auto">
                <button type="button" class="btn" data-bs-toggle="modal" data-bs-target="#exampleModal"><i class="fas fa-code"></i></button>
            </li>
        </ul>
    </div>
    <div class="d-flex flex-row h-100">
        <div class="diagram-toolbar">
            <ul class="d-flex flex-column align-items-start p-3 h-50">
                <li class="w-100">
                    <button type="button" class="d-flex align-items-center btn p-0 w-100">
                        <img src="https://via.placeholder.com/50" class="rounded" />
                        <span class="px-2">Terminator</span>
                    </button>
                </li>
                <li class="w-100">
                    <button type="button" class="d-flex align-items-center btn p-0 w-100">
                        <img src="https://via.placeholder.com/50" class="rounded" />
                        <span class="px-2">Decision</span>
                    </button>
                </li>
                <li class="w-100">
                    <button type="button" class="d-flex align-items-center btn p-0 w-100">
                        <img src="https://via.placeholder.com/50" class="rounded" />
                        <span class="px-2">Process</span>
                    </button>
                </li>
            </ul>
            <div class="diagram-properties h-50">
                @if (this.DiagramModel != null)
                {
                    <table class="table table-bordered table-sm align-middle">
                        <thead>
                            <tr>
                                <th colspan="2" class="border-0">Properties</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    X
                                </td>
                                <td class="p-0">
                                    <input type="text" class="form-control border-0" value="@this.DiagramModel.Components[0].Position.X" @onchange='(e) => { _ = this.JSRuntime.InvokeVoidAsync("markdownApp.diagramEngine.setComponentProperty", this.DiagramModel.Components[0].Id, "position.x", e.Value); }' />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Y
                                </td>
                                <td class="p-0">
                                    <input type="text" class="form-control border-0" value="@this.DiagramModel.Components[0].Position.Y" @onchange='(e) => { _ = this.JSRuntime.InvokeVoidAsync("markdownApp.diagramEngine.setComponentProperty", this.DiagramModel.Components[0].Id, "position.y", e.Value); }' />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Width
                                </td>
                                <td class="p-0">
                                    <input type="text" class="form-control border-0" value="@this.DiagramModel.Components[0].Position.Width" @onchange='(e) => { _ = this.JSRuntime.InvokeVoidAsync("markdownApp.diagramEngine.setComponentProperty", this.DiagramModel.Components[0].Id, "position.width", e.Value); }' />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Height
                                </td>
                                <td class="p-0">
                                    <input type="text" class="form-control border-0" value="@this.DiagramModel.Components[0].Position.Height" @onchange='(e) => { _ = this.JSRuntime.InvokeVoidAsync("markdownApp.diagramEngine.setComponentProperty", this.DiagramModel.Components[0].Id, "position.height", e.Value); }' />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Background
                                </td>
                                <td class="p-0">
                                    <input type="text" class="form-control border-0" value="@this.DiagramModel.Components[0].BackgroundColor" @onchange='(e) => { _ = this.JSRuntime.InvokeVoidAsync("markdownApp.diagramEngine.setComponentProperty", this.DiagramModel.Components[0].Id, "backgroundColor", e.Value); }' />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Stroke
                                </td>
                                <td class="p-0">
                                    <input type="text" class="form-control border-0" value="@this.DiagramModel.Components[0].StrokeColor" @onchange='(e) => { _ = this.JSRuntime.InvokeVoidAsync("markdownApp.diagramEngine.setComponentProperty", this.DiagramModel.Components[0].Id, "strokeColor", e.Value); }' />
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <div id="diagram-container" class="flex-fill">
            <canvas id="diagram-canvas"></canvas>
            <div class="diagram-coordinates"></div>
            <div class="diagram-info">
                @if (this.DiagramModel != null)
                {
                    <div>@this.DiagramModel.Name - @this.DiagramModel.Components.Count component(s) w/ @this.DiagramModel.Components.SelectMany(x => x.Connections).Count() connection(s)</div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Components</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <code>
                    <pre>
                        @if (this.DiagramModel != null)
                        {
                            @Newtonsoft.Json.JsonConvert.SerializeObject(this.DiagramModel.Components, Newtonsoft.Json.Formatting.Indented);
                        }
                    </pre>
                </code>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string DiagramId { get; set; }

    public string[] Shapes = new string[3]
    {
        "Square", "Triangle", "Circle"
                };

    public DiagramFetchResponse DiagramModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.DiagramModel = await this.Client.GetFromJsonAsync<DiagramFetchResponse>("api/diagram/get/" + this.DiagramId);
        await this.JSRuntime.InvokeVoidAsync("markdownApp.createDiagramEngine", this.DiagramModel);
    }

    protected async void AddComponent()
    {
        HttpResponseMessage _response = await this.Client.PostAsJsonAsync<ComponentCreationOptions>("api/diagram/component/add", new ComponentCreationOptions()
        {
            DiagramId = this.DiagramModel.Id,
            Type = "rectangle"
        });

        Component _component = await _response.Content.ReadFromJsonAsync<Component>();

        await this.JSRuntime.InvokeVoidAsync("markdownApp.diagramEngine.addComponent", _component);

    }
}

<style>
    .modal-header, .modal-footer {
        border: none;
    }

    #diagram-container {
        position: relative;
    }

    .diagram-coordinates {
        position: absolute;
        left: 30px;
        bottom: 30px;
    }

    .diagram-info {
        position: absolute;
        right: 30px;
        bottom: 30px;
    }

    .diagram-properties {
        width: 250px;
        background-color: #ffffff;
    }

    .ribbon {
        position: absolute;
        bottom: 60px;
        width: 300px;
        left: calc(50% - 150px);
        margin: 0 auto;
        background: white;
        border-radius: 5px;
    }

    .diagram-properties table tbody tr td {
        width: 50%;
        background-color: #ffffff;
    }

        .diagram-properties table tbody tr td:first-child {
            border-left: none;
        }

        .diagram-properties table tbody tr td:last-child {
            border-right: none;
        }

    .diagram-properties table tbody tr:last-child td {
        border-bottom: none;
    }
</style>