@page "/"

<div class="d-flex h-100">
    <div class="w-50 h-100">
        <div class="h-100 border-right">
            <textarea class="markdown-source h-100" @oninput="@OnMarkdownSourceChange" @bind="this.MarkdownSource"></textarea>
        </div>
    </div>
    <div class="w-50 h-100">
        <div class="markdown-output h-100">
            @this.CompiledMarkdown
        </div>
    </div>
</div>

@*<button type="button" @onclick="this.QuerySettings">Query Settings</button>
<button type="button" @onclick="this.AddSettings">Add Settings</button>

<table class="table">
    <thead>
        <tr>
            <th>Connection String</th>
        </tr>
    </thead>
    <tbody>
        @foreach (object item in this.Settings)
        {
            <tr>
                <td>Test</td>
            </tr>
        }
    </tbody>
</table>*@

@using Blazor.Markdown.Shared.Model.Options

@inject HttpClient Client

@code {
    public List<object> Settings = new List<object>();

    public string MarkdownSource { get; set; } = @"
        #Current Status

        ## main system:  
        - hot pacth upgrades are on [3.3.1](/Spyomic-Projects/Spyomic-Main/3.X/3.3.x/3.3.1)
        - Next release is [3.4.X](/Spyomic-Projects/Spyomic-Main/3.X/3.4.X)

        ##[Current Features](/Features)
        - ###[Future features and Changes](/Features/Future-features-and-Changes)
        ## [Main System Information](/Spyomic-Projects/Spyomic-Main)

        Version listing
        [3.2.0 Current version in development target date 11/8/2019](/Spyomic-Projects/Spyomic-Main/ChangeLogs/3.2.0)


         [3.1.100.3 Current Stable Version](/Spyomic-Projects/Spyomic-Main/ChangeLogs/3.1.100.0)
    ";

    public MarkupString CompiledMarkdown { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(this.MarkdownSource))
        {
            this.OnMarkdownSourceChange(new ChangeEventArgs()
            {
                Value = this.MarkdownSource
            });
        }
    }

    public async Task AddSettings()
    {
        await this.Client.PostAsJsonAsync("api/settings/add", new SettingsCreationOptions());
    }

    public async Task QuerySettings()
    {
        this.Settings = await this.Client.GetFromJsonAsync<List<object>>("api/settings/list");
    }

    public void OnMarkdownSourceChange(ChangeEventArgs args)
    {
        string _compiled = string.Empty;

        foreach (string line in args.Value.ToString().Split('\n'))
        {
            Console.WriteLine(line);

            // Remove any new line and return characters from the line.
            string _cleaned = line.Replace("\n", "").Replace("\r", "");
            string[] _components = _cleaned.Split(" ");

            string _converted = string.Empty;

            if (_components.Length > 0)
            {
                _converted += $"<h1>{string.Join(" ", _components, 1, _components.Length - 1)}</h1>";
            }
            else
            {
                _converted += line;
            }

            _compiled += $"{_converted}{Environment.NewLine}";
        }

        this.CompiledMarkdown = new MarkupString(_compiled);
    }
}