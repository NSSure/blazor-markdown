@page "/users"

@using Blazor.Markdown.Shared.Model.Options

@inject HttpClient Client

<div class="app-page">
    <h3>Users</h3>

    <div class="mb-3">
        <label for="txtAction" class="form-label">Action</label>
        <input type="text" class="form-control" id="txtAction" @bind-value="this.QueryOptions.Action" />
    </div>

    <div class="mb-3">
        <button type="button" class="btn btn-primary" @onclick="this.QueryUsers">Search</button>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-sm m-0">
            <thead class="bg-primary text-white font-weight-normal">
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Address</th>
                    <th>Lanuage</th>
                    <th>IP Address</th>
                    <th>Date Added</th>
                    <th>Date Last Updated</th>
                </tr>
            </thead>
            <tbody>
                @foreach (Blazor.Markdown.Shared.Model.UserModel existingUser in this.ExistingUsers)
                {
                    <tr>
                        <td>@existingUser.Name</td>
                        <td>@existingUser.Email</td>
                        <td>@existingUser.Address</td>
                        <td>@existingUser.Language</td>
                        <td>@existingUser.IPAddress</td>
                        <td>@existingUser.DateAdded</td>
                        <td>@existingUser.DateLastUpdated</td>
                        @*<td>
                            @if (existingUser.RoleIds != null)
                            {
                                @foreach (Guid roleId in existingUser.RoleIds)
                                {
                                    <div class="role d-flex">
                                        <div role="button" aria-label="Delete action" tabindex="0" class="text-danger mr-2">
                                            <span class="oi oi-x" aria-hidden="true"></span>
                                        </div>
                                        <span>@roleId</span>
                                    </div>
                                }
                            }
                        </td>
                        <td>
                            @if (existingUser.ActionIds != null)
                            {
                                @foreach (Guid actionId in existingUser.ActionIds)
                                {
                                    <div class="action d-flex">
                                        <div role="button" aria-label="Delete action" tabindex="0" class="text-danger mr-2" @onclick="() => { this.RemoveAction(existingUser.Id, actionId); }">
                                            <span class="oi oi-x" aria-hidden="true"></span>
                                        </div>
                                        <span>@actionId</span>
                                    </div>
                                }
                            }
                        </td>*@
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public UserQueryOptions QueryOptions = new UserQueryOptions();

    public List<Blazor.Markdown.Shared.Model.UserModel> ExistingUsers = new List<Blazor.Markdown.Shared.Model.UserModel>();

    protected override async Task OnInitializedAsync()
    {
        await this.QueryUsers();
    }

    protected async Task QueryUsers()
    {
        HttpResponseMessage _response = await this.Client.PostAsJsonAsync<UserQueryOptions>("api/user/list", this.QueryOptions);
        this.ExistingUsers = await _response.Content.ReadFromJsonAsync<List<Blazor.Markdown.Shared.Model.UserModel>>();
    }

    protected async Task RemoveAction(Guid userId, Guid actionId)
    {
        UserActionRemovalOptions _removalOptions = new UserActionRemovalOptions()
        {
            UserId = userId,
            ActionId = actionId
        };

        await this.Client.PostAsJsonAsync<UserActionRemovalOptions>("api/action/user/remove", _removalOptions);
    }
}
